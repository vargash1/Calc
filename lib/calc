#!/usr/bin/env ruby
# @Author: vargash1
# @Name:   Vargas, Hector
# @Email:  vargash1@wit.edu
# @Date:   2015-07-03 00:17:45
# @Last Modified by:   vargash1
# @Last Modified time: 2015-07-14 00:53:18
require 'colorize'
require 'io/console'
class Calc
    def initialize()
        @x = nil; @y = nil
        @ans = nil; @operation = nil
        #flags
        @no_color = false
        @radixes = false
        # possible operations
        @ops = ['MUL','ADD','DIV','POW','SQRT','CURT','NRT','SUB','PRCT']
    end
    # parses arguments passed or line from stdin
    def parse_args(arr=nil)
    	usage if ARGV.length == 0
    	
    	# only parse flags if first arg is not a number
    	parse_flags() if !(is_number(ARGV[0]))

    	# use ARG or array from user later on in the program
        arr = ARGV if arr.nil?
        arr.each do |a|
        	puts a
            case 
            when (a == a[/[a-zA-Z]*/])
                if a.upcase == "ANS"
                	if (@x == nil) ? @x = @ans: @y = @ans
                	end
                	next
				end
                @ops.each do |elem|
                    if (a.upcase == elem)
                        @operation = elem
                    end
                end
            when (is_number(a))
                if (@x == nil) ? @x = a.to_f: @y = a.to_f
                end
            end
        end
        execute_operation() if !arr.nil?         
    end
    def parse_flags()
    	flags = ARGV[0]
        flags.split("").each do |f|
            @no_color = true if f.upcase == 'N'
            @radixes = true if f.upcase == 'R'
            usage() if f.upcase == 'H'
        end
    end
    # does operation requested
    def execute_operation()
        chck_error()
        case
        when (@operation == 'MUL')
            @ans = @x * @y 
        when (@operation == 'ADD')
            @ans = @x + @y
        when (@operation == 'DIV')
            @ans = @x / @y
        when (@operation == 'SUB')
            @ans = @x - @y
        when (@operation == 'POW')
            @ans = @x ** @y
        when (@operation == 'SQRT')
            @ans = @x ** (1.0/2.0)
        when (@operation == 'CURT')
            @ans = @x ** (1.0/3.0)
        when (@operation == 'NRT')
            @ans = @x ** (1.0/@y)
        when (@operation == 'PRCT')
            @ans = (@x/@y )* 100.0
        end
        print_result()
    end
    
    def get_char()
        STDOUT.flush
        user_in = STDIN.getch
        return user_in
    end

    #prints results to stdout
    def print_result()
    	String.disable_colorization = true if (@no_color)
    	puts "X #{@operation} Y".yellow
        case
        when (@radix)
            puts "X"; print_all_radixes(@x)
           	if @y != nil
           		puts "Y" 
            	print_all_radixes(@y) 
            end
            interactive()
        else
            puts "\t---------------------------------------".green
            print "X:\t\t".yellow; print "#{@x}\n" 
            if (@y != nil)       
                print "Y:\t\t".yellow; print "#{@y}\n"
            end
            print "Solution:\t".yellow; print "#{@ans}\n"        
            interactive()
        end
    end

    def print_all_radixes(num)
        puts "\t---------------------------------------".green
        print "Base 10:\t".yellow; print "#{num.to_s(10)}\n"
        print "Base 16:\t".yellow; print "#{num.to_s(16)}\n"
        print "Base 8: \t".yellow; print "#{num.to_s(8)}\n"
        print "Base 2:\n".yellow
        print_nice_binary(num)
    end
    # prints numbers in binary form with nice formating
    def print_nice_binary(num)
        if num <= (2**31)
            puts "\t32 Bit Format".yellow
            print "\t"
            31.downto(0) do |n| 
                print num[n]
                print " " if (n%4 == 0)
            end
        end
        if num <= (2**63)
            puts "\n\t64 Bit Format".yellow
            print "\t"
            63.downto(0) do |n|
                print num[n]
                print " " if (n%4 == 0)
            end
        else
            puts "\n\t128 Bit Format".yellow
            print "\t"
            127.downto(0) do |n|
                print"\n\t" if (n == 63)
                print num[n]
                print " " if (n%4 == 0) 
            end
        end
        puts
    end
    def usage()
        puts """
        Either of the following are valid.
        calc [FLAGS] [NUM] [OPERATION] [NUM]
        calc [FLAGS] [NUM] [OPERATION]    

        """
        exit
    end
    # answer is stored after every run
    # user can choose to operate again
    def interactive()
        puts "Answer was stored and it is possible to further operate using this data"
        puts "Enter (y/Y) to cont..."
        puts "Enter (q/Q) to quit..."
        tmp = get_char()
        exit if (tmp.upcase == 'Q')
        get_line() if (tmp.upcase == 'Y')
	end

    #gets a line from user, saves as array
    #then parsed in same function that was used to parse arguments
    def get_line()
        puts "Enter a line similar to the argument that you passed orignally"
        print "Operations:\n\t"
        @ops.each do |a|
            print a, " "
        end
        puts
		STDOUT.flush
		@x = nil; @y = nil
    	arr = STDIN.gets.chomp
		arr = arr.split(" ")
		parse_args(arr)
    end
    
    #checks for errors such as missing operands, illegal arithmetic... 
    def chck_error()
        # obvious
        abort("ERROR,Expected an operation!") if @operation == nil
        
        #y cant be nill except for the following 
        op_restric = (@operation != 'SQRT' && @operation != 'CURT')
        if op_restric && @y == nil
            abort ("ERROR, missing numbers for Operation #{@operation}")
        end

        # no dividing by 0
        if @y == 0 && (@operation == 'DIV' || @operation == 'MOD')
        	abort("Divide by 0 Error")
        end
    end
    # clever trick to see if number is numerical(int or float)
    def is_number(num)
        is_num = ((num.to_f.to_s == num.to_s) || (num.to_i.to_s == num.to_s))
        return is_num
    end
end
def main()
    runtime = Calc.new()
    runtime.parse_args()
    runtime.execute_operation()
end
main()